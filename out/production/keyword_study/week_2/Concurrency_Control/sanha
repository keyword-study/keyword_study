LOCK?
-> 트랜잭션 처리의 순차성을 보장하기 위한 방법 
두 개의 DB세션이 Patient table을 동시에 수정하려고 하는 상황엔 트랜잭션의 "원자성"이 무너진다. 이 원자성을 보존하기 위해 LOCK을 사용한다.

DB에서 데이터 수정은 DB Lock을 가진 *session만 가능하다. 데이터를 수정하기 위해 접근하면 세션은 DB Lock을 얻을 수 있는지 확인하며 가능하면 흭득한다. 그리고 트랜잭션이 커밋될 때 DB Lock을 반납한다. 
*session?
-> 데이터베이스에 대한 연산을 실행하는 논리적인 단위
1. DB접속을 시작으로 종료하기 까지 전체기간을 의미 
2. 사용자 -> 커넥션 -> 세션

LOKC 종류?
1. Shared Lock (공유 Lock 또는 Read Lock)
2. Exclusive Lock(배타적 Lock 또는 Write Lock)

Shared Lock?
-> 공유 Lock끼리는 동시에 접근이 가능하다. 하나의 데이터를 읽는 것은 여러 사용자가 동시에 할 수 있다.
-> 공유 락, 배타 락의 잠금 옵션은 Auto Commit 이 비활성화 되거나, BEGIN 혹은 START TRANSACTION 명령을 통해 트랜잭션이 시작된 상태에서만 잠금이 유지된다. 
    SELECT FOR SHARE를 사용하여 공유락을 흭득할 수 있다. ex) SELECT * FROM table_name WHERE id = 1 FOR SHARE;

Exclusive Lock?
-> 데이터를 변경하고자 할 때 사용되며, 트랜잭션이 완료될 때까지 유지. Exclusive Lock이 해제될 때 까지 다른 트랜잭션은 해당 리소스에 접근할 수 없다. 
-> SELECT FOR UPDATE를 사용하여 락을 흭득할 수 있다. ex) SELECT * FROM table_name WHERE id = 1 FOR UPDATE;

동시성 제어?
-비관적 동시성 제어
-> 사용자들이 같은 데이터를 동시에 수정할 것이라 가정 
    1.격리수준으로 처리 
    -> 강도 높은 락으로 완전한 일관성을 유지가 가능하다. 하지만 성능이슈가 있다. 
    2.row에 락을 걸어 처리(Exclusive Lock)
        -> select_for_update 쿼리를 통해 트랜잭션이 끝날 때 까지 row에 lock을 건다.


-낙관적 동시성 제어
-> 사용자들이 같은 데이터를 동시에 수정하지 않을 것이라 가정하며 데이터를 읽는 시점에 Lock을 걸지 않으며, 수정 시점에 값이 변경됐는지를 검사
    1.version 또는 update_at 컬럼 이용 -> 데이터를 수정하면 version 또는 update_at 컬럼을 이용하여 동일한 버전으로 수정하면 롤백처리







 
    






