소프트웨어는 데이터베이스가 필수적인 요소이며 서비스로직엔 대부분 DB와 커넥트가 이루어진다.
하지만 트랜잭션 관리를 할 때 데이터베이스에 의존하는 것은 아니다. 일부 서비스는 데이터베이스를 사용하지 않을 수 있으며
이러한 서비스도 데이터의 일관성과 무결성을 유지하기 위해 트랜잭션 관리를 필요로 할 수 있다.
따라서 트랜잭션은 다양한 컨텍스트에서 사용될 수 있으며 기본적인 트랜잭션의 의미를 정리하고 DB와 서버간의 트랜잭션 관리를 어떤식으로 해야 하는지 알아보자.

트랜잭션이란?
"더 이상 분할이 불가능한 업무처리의 단위"를 의미한다.

예를들어, 가장 대표적인 결제 시스템을 보자 
A가 B에게 계좌이체를 했다고 하면 A에 통장에서 돈이 차감되고 B 통장에선 차감된 돈 만큼 돈이 입금이 되야 
"계좌이체"라는 행위는 완성이 된다. 따라서 인출과 입금이 같이 이루어져야 하며 두 과정은 동시에 성공하던지 실패해야 한다.

트랜잭션 4가지 특징
트랜잭션은 "ACID"라고 하는 원자성, 일관성, 격리성, 지속성을 보장해야한다.

1.원자성(Atomicity)
-> 트랜잭션 내에서 실행한 작업들은 모두 성공하거나 모두 실패해야 한다.

2.일관성(Consistency)
-> 트랜잭션이 완료된 후에 시스템은 일관된 상태여야 한다. 트랜잭션이 실행하기 전과 실행 후의 시스템 상태는 일관되어야 한다.

3.격리성(isolation)
-> 여러 트랜잭션이 동시에 실행될 때, 각 트랜잭션은 다른 트랜잭션의 작업에 영향을 받지 않아야 한다.
-> 격리성을 유지하는 것은 동시성 제어 기술을 사용하여 구현되며 4가지 격리수준이 있다.
    1. Read Uncommitted (미 허용 읽기)
    -> 다른 트랜잭션에서 변경 중인 데이터도 읽을 수 있다. 
    2.Read Committed(허용 읽기)
    -> 커밋된 데이터만 읽을 수 있다. 다른 트랜잭션이 수정중인 데이터는 읽을 수 없다.
    3.Repeatable Read(반복 읽기)
    -> 한 트랜잭션 내에서 같은 쿼리를 여러 번 실행하더라도 결과가 항상 동일해야한다.
    4.Serializable(직렬화 가능)
    -> 가장 높은 격리 수준으로, 동시성이 완전히 제거되어 모든 트랜잭션을 순차적으로 실행

4.지속성(durability)
-> 트랜잭션이 완료되고 시스템이 응답을 반환한 후에도, 해당 트랜잭션의 결과는 영구적으로 저장되어야 한다.


Spring 트랜잭션

만약에 DB가 아닌 메모장에 데이터를 입력하면 spring 트랜잭션 어노테이션을 사용해도 무방? 또는 파이어 베이스를이용하면? 알아서 처리를 해주나? 



