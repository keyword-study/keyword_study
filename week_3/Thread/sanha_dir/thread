프로세스? (스레드 자료_1 참고)
 -사전적 의미 
-> task라고 하며 하나의 운영체제에서 프로세스가 여러개 작동중인 상황을 muliti-tasking이라고 한다.
-> "컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램"
-> 운영체제로부터 자원(CPU,메모리,I/O, 파일 등)을 할당받아 동작 하게된다.
-> 메모리에 올라와 실행되고 있는 프로그램의 인스턴스(독립적인 개체)

 -특징
-> 프로세스는 각각 독립된 메모리영역(Code, Data, Stack, Heap의 구조)을 할당받는다.
-> 기본적으로 프로세스당 최소 1개의 스레드(메인스레드)를 가지고 있다.
-> 각 프로세스는 별도의 주소 공간에서 실행되며, 한 프로세스는 다른 프로세스의 변수나 자료구조에 접근할 수 없다. 

쓰레드란? (스레드 자료_2 참고)
-사전적 의미
-> "프로세스 내에서 실행되는 여러 흐름의 단위"
-> 프로세스가 할당받은 자원을 이용하는 실행의 단위

-특징
-> 스레드는 프로세스 내에서 각각 Stack만 따로 할당받고, Code, Data, Heap 영역은 공유한다.
-> 각각의 스레드는 별도의 스택을 갖고 잊지만, 힙 메모리는 서로 읽고 쓸 수 있다.

자바 쓰레드?
-> 일반 스레드와 거이 비슷하며 JVM이 운영체제의 역할을 한다.
-> 자바에는 프로세스가 없다!!
-> 개발자는 자바 스레드로 작동할 스레드 코드를 작성하고, 스레드 코드가 생명을 가지고 실행을 시작하도록 JVM에 요청하는 일 뿐이다.


질문!
스레드를 많이 쓰면 쓸스록 성능이 높아지는가?
1. 멀티 스레드는 자원을 공유하기 때문에 멀티 프로세스보단 컨텍스트 스위칭이 빠르다는 장점이 존재한다. 하지만 같은 임계 영역의 자원을 공유하기 때문에 동기화(synchornized)기법을 사용해야한다.
-> 따라서 동기화 작업을 위한 비용이 생긴다.
그러면 동기화 기법에는 무엇이 있을까?
1. 뮤텍스 -> Locking을 이용하여 1개의 쓰레드가 점유하고 있는 자원을 접근 못하도록 한다.
2. 세마포어 -> 한정된 수를 정의하고 해당 수 만큼 공유된 자원에 접근이 가능하다.
-> 이러한 특정 규칙에 따라 락 획득 및 해제 작업은 추가적인 사긴이 소요되며, 나머지 스레드의 실행을 중지하거나 대기하게 만들어야 하므로 비용이 생긴다

2.컨텍스트 스위칭 오버헤드
-> 여러개의 스레드가 있을때, 현재 스레드의 상태를 저장하고 다른 스레드로 전환될 때 발생하는 비용을 의미한다.
이 스위칭 하는 과정에서 시간과 자원을 소모하므로 비용이 생긴다. 이말의 뜻은 많은 쓰레드가 작업을 처리 할수록 컨텍스트 스위칭의 빈도수가 더 늘어나며 오버헤드도 많아져 성능 저하될 수 있다.


*임계영역
-> 공유 자원을 접근하는 코드 영역을 말한다. 전역변수, heap이 있다.




keyword
-> 서블릿 컨테이너 
-> tomcat thread pool
-> NIO connector
-> Embed tomcat
-> 가상 쓰레드? 






